# Import necessary libraries
from sklearn.preprocessing import LabelEncoder
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from scipy.stats import skew, kurtosis
from sklearn.model_selection import train_test_split

# Read in the CSV file
file_path = r"C:\Users\Bullet\OneDrive\Pulpit\databases\US_Regional_Sales_Data.csv"
chunk_size = 70000  # Define the chunk size

chunks = pd.read_csv(file_path, chunksize=chunk_size)
data = pd.concat([chunk for chunk in chunks]).head(10000)

# Convert relevant columns to numeric types
for column in ['Discount Applied', 'Unit Cost', 'Order Quantity']:
    data[column] = data[column].astype(str).str.replace(',', '').astype(float)

# Select specific columns for analysis
data_to_use = data.loc[:, ["Discount Applied", "Unit Cost",
                           "Order Quantity", "Sales Channel", "Unit Price"]]

# Data for the first linear regression model
datey = data.loc[:, ["Discount Applied", "Order Quantity"]]
y_2 = datey["Discount Applied"].sort_values().values.reshape(-1, 1)
y = datey["Order Quantity"].sort_values().values

# First linear regression model
model = LinearRegression()
model.fit(y_2, y)
y_pred = model.predict(y_2)

# Plot the first regression model
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.scatter(y_2, y, color="black", label="Data points")
plt.plot(y_2, y_pred, color="blue", linewidth=2, label="Regression line")
plt.xlabel("Discount Applied")
plt.ylabel("Order Quantity")
plt.title(" Discount Applied vs Order Quantity")
plt.legend()

mse = mean_squared_error(y, y_pred)
r2 = r2_score(y, y_pred)

print(f"Intercept (Discount Applied vs Order Quantity): {model.intercept_}")
print(f"Coefficient (Discount Applied vs Order Quantity): {model.coef_[0]}")
print(f"Mean Squared Error (Discount Applied vs Order Quantity): {mse}")
print(f"R^2 Coefficient (Discount Applied vs Order Quantity): {r2}")

# Descriptive statistics for 'Discount Applied' and 'Order Quantity'
for column in ["Discount Applied", "Order Quantity"]:
    data_column = datey[column]
    print(f"\nDescriptive statistics for {column}:")
    print(f"Mean: {data_column.mean()}")
    print(f"Median: {data_column.median()}")
    print(f"Standard Deviation: {data_column.std()}")
    print(f"Variance: {data_column.var()}")
    print(f"Minimum: {data_column.min()}")
    print(f"Maximum: {data_column.max()}")
    print(f"Range: {data_column.max() - data_column.min()}")
    print(f"Skewness: {skew(data_column)}")
    print(f"Kurtosis: {kurtosis(data_column)}")
    print(f"Q1: {data_column.quantile(0.25)}")
    print(f"Q2 (Median): {data_column.quantile(0.50)}")
    print(f"Q3: {data_column.quantile(0.75)}")

# Data for the second linear regression model
datey_2 = data.loc[:, ["Unit Cost", "Order Quantity"]]
x_2 = datey_2["Unit Cost"].sort_values().values.reshape(-1, 1)
y_2_2 = datey_2["Order Quantity"].sort_values().values

# Second linear regression model
model_2 = LinearRegression()
model_2.fit(x_2, y_2_2)
y_pred_2 = model_2.predict(x_2)

# Plot the second regression model
plt.subplot(1, 2, 2)
plt.scatter(x_2, y_2_2, color="black", label="Data points")
plt.plot(x_2, y_pred_2, color="blue", linewidth=2, label="Regression line")
plt.xlabel("Unit Cost")
plt.ylabel("Order Quantity")
plt.title("Unit Cost vs Order Quantity")
plt.legend()

plt.tight_layout()
plt.show()

mse_2 = mean_squared_error(y_2_2, y_pred_2)
r2_2 = r2_score(y_2_2, y_pred_2)

print(f"Intercept b (Unit Cost vs Order Quantity): {model_2.intercept_}")
print(f"Coefficient (Unit Cost vs Order Quantity): {model_2.coef_[0]}")
print(f"Mean Squared Error (Unit Cost vs Order Quantity): {mse_2}")
print(f"R^2 Coefficient (Unit Cost vs Order Quantity): {r2_2}")

# Plotting sales channel distribution
sales_channel_data = data['Sales Channel']
sales_channel_counts = sales_channel_data.value_counts()

plt.figure(figsize=(10, 6))
sales_channel_counts.plot(kind='bar', color='skyblue')
plt.title('Quantity of Sales for Each Sales Channel')
plt.xlabel('Sales Channel')
plt.ylabel('Quantity of Sales')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(8, 8))

colors = ['orange', 'lightblue', 'green']
if len(sales_channel_counts) > len(colors):
    colors += ['purple'] * (len(sales_channel_counts) - len(colors))

if 'Wholesale' in sales_channel_counts.index:
    colors[sales_channel_counts.index.get_loc('Wholesale')] = 'purple'
if 'In-Store' in sales_channel_counts.index:
    colors[sales_channel_counts.index.get_loc('In-Store')] = 'red'

plt.pie(sales_channel_counts, labels=sales_channel_counts.index, autopct='%1.1f%%',
        startangle=140, colors=colors)

plt.title("% Contribution for Each Sales Channel")
plt.axis('equal')
plt.show()

# Read the CSV file again for full data processing
file_path = pd.read_csv(
    r'C:\Users\Bullet\OneDrive\Pulpit\databases\US_Regional_Sales_Data.csv')

file_path = file_path.dropna(subset=['Unit Price', 'Unit Cost'])

int_columns_to_convert = ['_SalesTeamID',
                          '_CustomerID', '_StoreID', '_ProductID']
file_path[int_columns_to_convert] = file_path[int_columns_to_convert].astype(
    str)

columns_to_drop = ['OrderNumber', 'CurrencyCode']
file_path = file_path.drop(columns=columns_to_drop)

file_path['OrderDate'] = pd.to_datetime(
    file_path['OrderDate'], format='%d/%m/%y', errors='coerce')

file_path = file_path.dropna(subset=['OrderDate'])

file_path['OrderDate_Year'] = file_path['OrderDate'].dt.year
file_path['OrderDate_Month'] = file_path['OrderDate'].dt.month
file_path['OrderDate_Day'] = file_path['OrderDate'].dt.day

file_path['Unit Cost'] = file_path['Unit Cost'].replace(
    '[,]', '', regex=True).astype(float)
file_path['Unit Price'] = file_path['Unit Price'].replace(
    '[,]', '', regex=True).astype(float)

# Encode categorical features
encoder = LabelEncoder()
for feature in file_path.select_dtypes(include=['object']).columns:
    file_path[feature] = encoder.fit_transform(file_path[feature])

numerical_summary = file_path.describe()
print("Descriptive Statistics:")
print(numerical_summary)

# Split the data for regression analysis
X = file_path.drop(columns=['Unit Price', 'OrderDate'])
Y = file_path['Unit Price']

X_train, X_test, Y_train, Y_test = train_test_split(
    X, Y, test_size=0.2, random_state=1)

model = LinearRegression()
model.fit(X_train, Y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(Y_test, y_pred)
r2 = r2_score(Y_test, y_pred)
print("Mean Squared Error:", mse)
print("R^2 Score:", r2)

# Plotting histograms for 'Unit Cost' and 'Unit Price' with descriptive statistics
plt.figure(figsize=(12, 6))

plt.subplot(2, 2, 1)
plt.hist(file_path['Unit Cost'], bins=20, color='skyblue', edgecolor='black')
plt.title('Distribution of Unit Cost')
plt.xlabel('Unit Cost')
plt.ylabel('Frequency')

plt.subplot(2, 2, 2)
plt.hist(file_path['Unit Price'], bins=20, color='salmon', edgecolor='black')
plt.title('Distribution of Unit Price')
plt.xlabel('Unit Price')
plt.ylabel('Frequency')

# Displaying descriptive statistics for 'Unit Cost'
unit_cost_stats = file_path['Unit Cost']
print(f"\nDescriptive statistics for Unit Cost:")
print(f"Mean: {unit_cost_stats.mean()}")
print(f"Median: {unit_cost_stats.median()}")
print(f"Standard Deviation: {unit_cost_stats.std()}")
print(f"Variance: {unit_cost_stats.var()}")
print(f"Minimum: {unit_cost_stats.min()}")
print(f"Maximum: {unit_cost_stats.max()}")
print(f"Range: {unit_cost_stats.max() - unit_cost_stats.min()}")

print(f"Skewness: {skew(unit_cost_stats)}")
print(f"Kurtosis: {kurtosis(unit_cost_stats)}")
print(f"Q1: {unit_cost_stats.quantile(0.25)}")
print(f"Q2 (Median): {unit_cost_stats.quantile(0.50)}")
print(f"Q3: {unit_cost_stats.quantile(0.75)}")

# Displaying descriptive statistics for 'Unit Price'
unit_price_stats = file_path['Unit Price']
print(f"\nDescriptive statistics for Unit Price:")
print(f"Mean: {unit_price_stats.mean()}")
print(f"Median: {unit_price_stats.median()}")
print(f"Standard Deviation: {unit_price_stats.std()}")
print(f"Variance: {unit_price_stats.var()}")
print(f"Minimum: {unit_price_stats.min()}")
print(f"Maximum: {unit_price_stats.max()}")
print(f"Range: {unit_price_stats.max() - unit_price_stats.min()}")
print(f"Skewness: {skew(unit_price_stats)}")
print(f"Kurtosis: {kurtosis(unit_price_stats)}")
print(f"Q1: {unit_price_stats.quantile(0.25)}")
print(f"Q2 (Median): {unit_price_stats.quantile(0.50)}")
print(f"Q3: {unit_price_stats.quantile(0.75)}")

# Plotting scatter plot for Unit Cost vs Unit Price
plt.figure(figsize=(8, 6))
plt.scatter(file_path['Unit Cost'], file_path['Unit Price'], alpha=0.5)
plt.title('Scatter Plot of Unit Cost vs Unit Price')
plt.xlabel('Unit Cost')
plt.ylabel('Unit Price')
plt.grid(True)
plt.show()

# Plotting actual vs predicted Unit Price
plt.figure(figsize=(10, 6))
plt.scatter(Y_test, y_pred, color='blue')
plt.plot(Y_test, Y_test, color='red', linewidth=2)
plt.title('Actual vs Predicted Unit Price')
plt.xlabel('Actual Unit Price')
plt.ylabel('Predicted Unit Price')
plt.grid(True)
plt.show()

# Display descriptive statistics for 'Unit Cost' and 'Unit Price' under histograms
fig, axs = plt.subplots(2, 1, figsize=(12, 10))

axs[0].hist(file_path['Unit Cost'], bins=20,
            color='skyblue', edgecolor='black')
axs[0].set_title('Distribution of Unit Cost')
axs[0].set_xlabel('Unit Cost')
axs[0].set_ylabel('Frequency')

unit_cost_stats_text = f"""\
Mean: {unit_cost_stats.mean():.2f}
Median: {unit_cost_stats.median():.2f}
Std Dev: {unit_cost_stats.std():.2f}
Variance: {unit_cost_stats.var():.2f}
Min: {unit_cost_stats.min():.2f}
Max: {unit_cost_stats.max():.2f}
Range: {unit_cost_stats.max() - unit_cost_stats.min():.2f}
Skewness: {skew(unit_cost_stats):.2f}
Kurtosis: {kurtosis(unit_cost_stats):.2f}
Q1: {unit_cost_stats.quantile(0.25):.2f}
Q2: {unit_cost_stats.quantile(0.50):.2f}
Q3: {unit_cost_stats.quantile(0.75):.2f}
"""
axs[0].text(0.95, 0.5, unit_cost_stats_text, transform=axs[0].transAxes, fontsize=10,
            verticalalignment='center', horizontalalignment='right', bbox=dict(facecolor='white', alpha=0.5))

axs[1].hist(file_path['Unit Price'], bins=20,
            color='salmon', edgecolor='black')
axs[1].set_title('Distribution of Unit Price')
axs[1].set_xlabel('Unit Price')
axs[1].set_ylabel('Frequency')

unit_price_stats_text = f"""\
Mean: {unit_price_stats.mean():.2f}
Median: {unit_price_stats.median():.2f}
Std Dev: {unit_price_stats.std():.2f}
Variance: {unit_price_stats.var():.2f}
Min: {unit_price_stats.min():.2f}
Max: {unit_price_stats.max():.2f}
Range: {unit_price_stats.max() - unit_price_stats.min():.2f}
Skewness: {skew(unit_price_stats):.2f}
Kurtosis: {kurtosis(unit_price_stats):.2f}
Q1: {unit_price_stats.quantile(0.25):.2f}
Q2: {unit_price_stats.quantile(0.50):.2f}
Q3: {unit_price_stats.quantile(0.75):.2f}
"""
axs[1].text(0.95, 0.5, unit_price_stats_text, transform=axs[1].transAxes, fontsize=10,
            verticalalignment='center', horizontalalignment='right', bbox=dict(facecolor='white', alpha=0.5))

plt.tight_layout()
plt.show()
