# option_pricing.py
import QuantLib as ql

def price_option(option_type, underlying_price, strike_price, maturity_date, volatility, risk_free_rate):
    calculation_date = ql.Date.todaysDate()
    ql.Settings.instance().evaluationDate = calculation_date

    underlying = ql.SimpleQuote(underlying_price)
    risk_free_curve = ql.FlatForward(calculation_date, risk_free_rate, ql.Actual360())

    payoff = ql.PlainVanillaPayoff(option_type, strike_price)
    exercise = ql.EuropeanExercise(maturity_date)
    european_option = ql.VanillaOption(payoff, exercise)

    process = ql.BlackScholesProcess(ql.QuoteHandle(underlying),
                                      ql.YieldTermStructureHandle(risk_free_curve),
                                      ql.BlackVolTermStructureHandle(ql.BlackConstantVol(calculation_date, ql.NullCalendar(), volatility, ql.Actual360())))

    engine = ql.AnalyticEuropeanEngine(process)
    european_option.setPricingEngine(engine)
    option_price = european_option.NPV()

    return option_price

def main():
    print("Enter option parameters:")
    
    option_type = input("Option type (Call/Put): ")
    if option_type.lower() == "call":
        option_type = ql.Option.Call
    elif option_type.lower() == "put":
        option_type = ql.Option.Put
    else:
        print("Invalid option type!")
        return

    underlying_price = float(input("Underlying price: "))
    strike_price = float(input("Strike price: "))
    maturity_date_str = input("Maturity date (YYYY-MM-DD): ")
    maturity_date = ql.DateParser.parseISO(maturity_date_str)
    volatility = float(input("Volatility: "))
    risk_free_rate = float(input("Risk-free rate: "))

    option_price = price_option(option_type, underlying_price, strike_price, maturity_date, volatility, risk_free_rate)
    print("Option price:", option_price)

if __name__ == "__main__":
    main()
